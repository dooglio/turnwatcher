#!/bin/bash
#
# File:		dev/build-win32
# Object:	Build the win32 installer
#
# Copyright:	Copyright (c) 2005-2008 Made to Order Software Corp.
#
#		All Rights Reserved.
#
#		This software and its associated documentation contains
#		proprietary, confidential and trade secret information
#		of Made to Order Software Corp. and except as provided by
#		written agreement with Made to Order Software Corp.
#
#		a) no part may be disclosed, distributed, reproduced,
#		   transmitted, transcribed, stored in a retrieval system,
#		   adapted or translated in any form or by any means
#		   electronic, mechanical, magnetic, optical, chemical,
#		   manual or otherwise,
#
#		and
#
#		b) the recipient is not entitled to discover through reverse
#		   engineering or reverse compiling or other such techniques
#		   or processes the trade secrets contained therein or in the
#		   documentation.
set -e

#
# Use this script to build the Win32 installer (and everything
# which the installer needs, of course!).
#

# This script cannot be used by itself, there is too much going on in
# the main script (dev/build)

if test -z "$BUILD_VERSION" -o -z "$BUILD_VERSION_STRING" -o -z "$VERSION"
then
	echo "turnwatcher: error: some environment variables defined by the dev/build script"
	echo "turnwatcher: error: are not defined; $0 cannot be used directly."
	exit 1;
fi



##
## The following has to be done in dev/build before this one script is being called
##
## Read the command line options
#. dev/get_options
#
## Get the version
#. dev/get_version


#
# Watch out! We need to take the $DEMO variable in account.
# At this time, the rest is pretty much the same all over otherwise.
#


BUILD_WIN32=BUILD/win32

rm -rf $BUILD_WIN32
mkdir -p $TMPDIR $BUILD_WIN32



##
## Setup and make sure all the necessary variables
## are defined before to do the transfer & run the
## actual build under MS-Windows
##
M2OSW_WIN32_CONNECT=m2osw_user@win32-build-system
if $DEMO || $BETA
then
	DEMO_WORD=" Demo"
else
	DEMO_WORD=
fi
INSTALLER_VERSION=`grep 'define.*INSTALLER_VERSION' dev/win32/nsis/turnwatcher.nsi | sed -e 's/.*\([0-9]\).*/\1/'`

WIN32_VERSION=$VERSION-${BUILD_VERSION_STRING}_$INSTALLER_VERSION$DEMO_NAME

OUTPUT=turnwatcher-install-$WIN32_VERSION-win32-i686.exe



##
## Show the user the full version!
##
echo
echo "turnwatcher: building Turn Watcher version $WIN32_VERSION"
echo "turnwatcher: for Win32 arch in $BUILD_WIN32"
echo "turnwatcher: output file: \"$OUTPUT\""
START_DATE=`date`
echo "turnwatcher: start date: $START_DATE"




# Delete any old version so we know whether we really get a new version
rm -rf $BUILD_WIN32/turnwatcher-install-*[0-9].*[0-9]-*[0-9]_*[0-9]$DEMO_NAME-win32-i686.exe


if test -d ../../../sandbox
then
	SANDBOX_PREFIX=`cd ../../../sandbox/mingw32/$CONFIGURE_MOVERSION; pwd`
else
	# from a branch we're one directory deeper
	SANDBOX_PREFIX=`cd ../../../../sandbox/mingw32/$CONFIGURE_MOVERSION; pwd`
fi




# Get ready to cross-compile
export LANG=C
export LANGUAGE=C
export PATH="$SANDBOX_PREFIX/bin:/usr/lib/mo/$CONFIGURE_MOVERSION/bin:/usr/bin:/bin"
# Should we add -mthreads so we get proper multi-thread exception handling?
export CFLAGS="-I$SANDBOX_PREFIX/include -O2 -mwindows -mno-cygwin -mms-bitfields -march=i686"
export CPPFLAGS="-I$SANDBOX_PREFIX/include -O2 -mwindows"
export CXXFLAGS="-I$SANDBOX_PREFIX/include -O2 -mwindows -mno-cygwin -mms-bitfields -march=i686"
export ARFLAGS="rcs"
export LDFLAGS="-L$SANDBOX_PREFIX/lib -no-undefined"

export AS="i586-mingw32msvc-as"
export CC="i586-mingw32msvc-gcc"
export CPP="i586-mingw32msvc-cpp"
export CPPFILT="i586-mingw32msvc-c++filt"
export CXX="i586-mingw32msvc-g++"
export DLLTOOL="i586-mingw32msvc-dlltool"
export DLLWRAP="i586-mingw32msvc-dllwrap"
export GCOV="i586-mingw32msvc-gcov"
export LD="i586-mingw32msvc-ld"
export NM="i586-mingw32msvc-nm"
export OBJCOPY="i586-mingw32msvc-objcopy"
export OBJDUMP="i586-mingw32msvc-objdump"
export READELF="i586-mingw32msvc-readelf"
export SIZE="i586-mingw32msvc-size"
export STRINGS="i586-mingw32msvc-strings"
export WINDRES="i586-mingw32msvc-windres"
export AR="i586-mingw32msvc-ar"
export RANLIB="i586-mingw32msvc-ranlib"
export STRIP="i586-mingw32msvc-strip"

export PKG_CONFIG_PATH=$SANDBOX_PREFIX/lib/pkgconfig
export LD_LIBRARY_PATH=$SANDBOX_PREFIX/lib

echo "Path = $PKG_CONFIG_PATH"

cd BUILD
# install result in mingw32
rm -rf mingw32
mkdir mingw32
cd mingw32
TW_PREFIX=`pwd`
# compile in win32
cd ../win32


##
## Get the resources.rc file ready
##
mkdir -p src
sed	-e "s/@VERSION@/$VERSION/g" \
	-e "s/@VERSION_MAJOR@/$VERSION_MAJOR/g" \
	-e "s/@VERSION_MINOR@/$VERSION_MINOR/g" \
	-e "s/@BUILD_VERSION@/$BUILD_VERSION/g" \
	-e "s/@INSTALLER_VERSION@/$INSTALLER_VERSION/g" \
	-e "s/@DEMO@/$DEMO_WORD/g" \
		../../src/resources.rc >src/resources.rc




if $DEBUG
then
	dbg=--enable-debug
else
	dbg=
fi
if $BETA
then
	beta=--enable-beta
else
	beta=
fi
if $DEMO
then
	demo=--enable-demo
else
	demo=
fi
if $LEGACY_UI
then
	legacy_ui=--enable-legacyui
else
	legacy_ui=
fi

echo "turnwatcher: building .exe"
(
	# Here we capture the output and put it in build-win32.txt for review
	#--libdir $TW_PREFIX/lib \
	../../configure $demo $beta $dbg $legacy_ui \
		--build=i686-pc-linux-gnuaout \
		--host=i586-pc-mingw32msvc \
		--target=i586-pc-mingw32msvc \
		--enable-shared \
		--disable-static \
		--prefix=$TW_PREFIX

	make
	make install

) >>../../$TMPDIR/build-win32.txt 2>&1

##
## Install all the necessary binaries and DLLs
##

# switch from win32 to mingw32
echo "turnwatcher: preparing installer files"
cd ../mingw32
for f in pango-querymodules.exe gtk-query-immodules-2.0.exe gdk-pixbuf-query-loaders.exe
do
	cp $SANDBOX_PREFIX/bin/$f bin/$f
done

for f in $SANDBOX_PREFIX/lib/{gtk-2.0,pango}/*/*/*.dll
do
	q=`echo $f | sed -e "s@$SANDBOX_PREFIX/@@"`
	mkdir -p `dirname $q`
	cp $f $q
done

for f in `dlf -f ../win32/dev/dlf-win32.conf bin/*.exe lib/*/*/*/*.dll`
do
	if echo "$f" | grep "/sandbox/mingw32/" >/dev/null
	then
		cp $f bin/.
	fi
done


##
## Install other data files (themes & messages)
##

# Get our own theme (i.e. Win32 with a large toolbar, large fonts, etc.)
mkdir -p share/themes/TurnWatcher/gtk-2.0
cp -r $SANDBOX_PREFIX/share/themes share/.
cp ../../dev/win32/gtk/turnwatcher.gtkrc share/themes/TurnWatcher/gtk-2.0/gtkrc

# Make our theme the default
mkdir -p etc
cp -r $SANDBOX_PREFIX/etc/gtk-2.0 etc/.
echo "gtk-theme-name = \"TurnWatcher\"" >etc/gtk-2.0/gtkrc

# get some extra messages (all are porbably not very useful...)
for f in $SANDBOX_PREFIX/share/locale/{de,es,fr}/LC_MESSAGES/*.mo
do
	case "`basename $f`" in
	atk*.mo | gettext*.mo | glib*.mo | g[td]k*.mo | libiconv*.mo)
		# Remove LC_MESSAGES
		fullpath=`dirname $f`
		language=`dirname $fullpath`
		lang=`basename $language`
		mkdir -p share/locale/$lang/LC_MESSAGES
		cp $f share/locale/$lang/LC_MESSAGES/.
		;;
	esac
done

# Gtk under Win32 actually searches lib/locale for .mo files!
# But in case it changes without us being aware, we just copy instead
# of moving the data there...
cp -r share/locale lib/.


##
## Copy the .nsi file, screensaver, turnwatcher env. to the Wine environment
##

# create a valid folder for Wine
WINE_PATH=~/.wine/drive_c/turnwatcher_installer
rm -rf $WINE_PATH/mingw32
mkdir -p $WINE_PATH

SCREENSAVER=../../../screensavers/win32/turnwatcher-screensaver.exe
if ! test -f $SCREENSAVER
then
	SCREENSAVER=../../../../screensavers/win32/turnwatcher-screensaver.exe
	if ! test -f $SCREENSAVER
	then
		echo "turnwatcher: error: cannot find Win32 screensaver"
		exit 1;
	fi
fi
cp $SCREENSAVER .

if $DOWNLOAD_VERSION
then
	SCREENSAVER_REGEX="/START -- screensaver/,/END -- screensaver/ d"
else
	SCREENSAVER_REGEX="s/DO NOTHING EXPRESSION//"
fi

if $DEMO || $BETA
then
	INSTALL_IMAGE=../../dev/images/turnwatcher-install-demo.bmp
else
	INSTALL_IMAGE=../../dev/images/turnwatcher-install.bmp
fi
cp $INSTALL_IMAGE turnwatcher-install.bmp

# fix the doc folders (we may want to fix that in the Makefile.am at some point!)
mv share/doc/turnwatcher/html share/turnwatcher/doc
rm -rf share/doc
cp ../../doc/LICENSE.txt ../../doc/LICENSE.rtf share/turnwatcher/doc

sed	-e "s/@VERSION@/$VERSION/g" \
	-e "s/@VERSION_MAJOR@/$VERSION_MAJOR/g" \
	-e "s/@VERSION_MINOR@/$VERSION_MINOR/g" \
	-e "s/@BUILD_VERSION_STRING@/$BUILD_VERSION_STRING/g" \
	-e "s/@BUILD_VERSION@/$BUILD_VERSION/g" \
	-e "s/@OUTPUT@/$OUTPUT/g" \
	-e "s/@DEMO@/$DEMO_WORD/g" \
	-e "${SCREENSAVER_REGEX}" \
		../../dev/win32/nsis/turnwatcher.nsi >turnwatcher.nsi

cd ..
cp -r mingw32 $WINE_PATH

echo "turnwatcher: running the installer generator (NSIS)"
MAKENSIS="c:\\Program Files\\NSIS\\makensis.exe"
INSTALLER_PATH=$WINE_PATH/mingw32
(
	cd $INSTALLER_PATH
	wine "${MAKENSIS}" turnwatcher.nsi
)


cd ..

echo "turnwatcher: the output of the ssh session is in $TMPDIR/build-win32.txt"



if test -d $PACKAGES_DIR
then
	cp -f $INSTALLER_PATH/$OUTPUT $PACKAGES_DIR/$OUTPUT

	# If it is not the first time, the add fails, but with -Q nothing is printed
	if $CHECKIN_PACKAGES
	then
		(
			svn --quiet add $PACKAGES_DIR/$OUTPUT
			svn commit --non-interactive -N \
				-m "Turn Watcher Win32 -- automatic build on `date`" \
				$PACKAGES_DIR/$OUTPUT
		) >>$TMPDIR/build-win32.txt 2>&1
	fi
fi


echo "turnwatcher: end date: `date` (started on: $START_DATE)"
echo
echo "turnwatcher: build Win32 finished."
echo



# vim: ts=8 sw=8
